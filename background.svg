<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 500" preserveAspectRatio="xMidYMid slice" onload="initColors()">
  <script type="text/javascript"><![CDATA[
    // COLOR PALETTE CONTROLLER
    // Change this variable to select a color palette (1-5)
    // Use negative numbers (-1 to -5) for dark mode with the same palette colors
    let colorPalette = 2;
    
    // Color palette definitions
    const palettes = {
      1: { // Blue-Green (Default)
        primary1: "#0064C8",
        primary2: "#007AFF",
        accent1: "#34C759",
        accent2: "#5856D6",
        background: "#f5f5f7"
      },
      2: { // Purple-Pink
        primary1: "#5856D6",
        primary2: "#AF52DE",
        accent1: "#FF2D55",
        accent2: "#FF9500",
        background: "#f7f5f7"
      },
      3: { // Orange-Red
        primary1: "#FF9500",
        primary2: "#FF2D55",
        accent1: "#AF52DE",
        accent2: "#5856D6",
        background: "#f7f5f5"
      },
      4: { // Green-Teal
        primary1: "#34C759",
        primary2: "#00C7BE",
        accent1: "#007AFF",
        accent2: "#0064C8",
        background: "#f5f7f5"
      },
      5: { // Red-Orange
        primary1: "#FF3B30",
        primary2: "#FF9500",
        accent1: "#FFCC00",
        accent2: "#34C759",
        background: "#f7f6f5"
      }
    };
    
    // Dark background color
    const darkBackground = "#1d1d1f";
    
    function initColors() {
      // Select positive palette number and determine if dark mode
      const paletteNum = Math.abs(colorPalette);
      const isDarkMode = colorPalette < 0;
      
      // Default to palette 1 if out of range
      const selectedPalette = palettes[paletteNum] || palettes[1];
      
      // Set background color
      document.getElementById('background-rect').setAttribute('fill', 
        isDarkMode ? darkBackground : selectedPalette.background);
      
      // Update all gradient and color definitions
      updateGradient('gradient1', selectedPalette.primary1, selectedPalette.accent1);
      updateGradient('gradient2', selectedPalette.accent1, selectedPalette.primary2);
      
      // Update solid color elements
      updateSolidColors('.solid-color1', selectedPalette.primary1);
      updateSolidColors('.solid-color2', selectedPalette.primary2);
      updateSolidColors('.solid-accent1', selectedPalette.accent1);
      updateSolidColors('.solid-accent2', selectedPalette.accent2);
    }
    
    function updateGradient(id, color1, color2) {
      const gradient = document.getElementById(id);
      if (gradient) {
        const stops = gradient.getElementsByTagName('stop');
        if (stops.length >= 2) {
          stops[0].setAttribute('stop-color', color1);
          stops[1].setAttribute('stop-color', color2);
        }
      }
    }
    
    function updateSolidColors(className, color) {
      const elements = document.querySelectorAll(className);
      elements.forEach(element => {
        if (element.hasAttribute('fill') && element.getAttribute('fill') !== 'none') {
          element.setAttribute('fill', color);
        }
      });
    }
  ]]></script>
  
  <defs>
    <!-- Gradients for filled areas -->
    <linearGradient id="gradient1" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" stop-color="#0064C8" stop-opacity="0.60"/>
      <stop offset="100%" stop-color="#34C759" stop-opacity="0.60"/>
    </linearGradient>
    <linearGradient id="gradient2" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" stop-color="#34C759" stop-opacity="0.60"/>
      <stop offset="100%" stop-color="#007AFF" stop-opacity="0.60"/>
    </linearGradient>
    
    <!-- Blur filter for everything -->
    <filter id="blur-effect" x="-5%" y="-5%" width="110%" height="110%">
      <feGaussianBlur in="SourceGraphic" stdDeviation="10" />
    </filter>
  </defs>
  
  <!-- Background -->
  <rect id="background-rect" width="1000" height="500" fill="#f5f5f7" />
  
  <!-- Group with blur filter applied -->
  <g filter="url(#blur-effect)">
    <!-- Filled Area 1 - Curved path from line to top -->
    <path d="M0,150 Q250,50 500,200 T1000,120 V0 H0 Z" fill="url(#gradient1)">
      <animate attributeName="d" 
        values="M0,150 Q250,50 500,200 T1000,120 V0 H0 Z;
                M0,170 Q250,280 500,180 T1000,140 V0 H0 Z;
                M0,150 Q250,50 500,200 T1000,120 V0 H0 Z" 
        dur="30s" 
        repeatCount="indefinite" />
    </path>
    
    <!-- Filled Area 2 - Curved path from line to bottom -->
    <path d="M0,350 Q250,280 500,350 T1000,320 V500 H0 Z" fill="url(#gradient2)">
      <animate attributeName="d" 
        values="M0,350 Q250,280 500,350 T1000,320 V500 H0 Z;
                M0,370 Q250,420 500,360 T1000,340 V500 H0 Z;
                M0,350 Q250,280 500,350 T1000,320 V500 H0 Z" 
        dur="20s" 
        repeatCount="indefinite" />
    </path>
    
    <!-- Large soft circle 1 -->
    <circle cx="200" cy="150" r="80" fill="#0064C8" class="solid-color1" opacity="1">
      <animate attributeName="cx" values="200;250;150;200" dur="60s" repeatCount="indefinite" />
      <animate attributeName="cy" values="150;180;120;150" dur="70s" repeatCount="indefinite" />
    </circle>
    
    <!-- Large soft circle 2 -->
    <circle cx="700" cy="300" r="100" fill="#34C759" class="solid-accent1" opacity="1">
      <animate attributeName="cx" values="700;750;650;700" dur="65s" repeatCount="indefinite" />
      <animate attributeName="cy" values="300;250;350;300" dur="75s" repeatCount="indefinite" />
    </circle>
  </g>
</svg>